// ./Sql-Bridge/build.gradle
plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

description = 'Database connectivity for modular plugin architecture'

repositories {
    mavenCentral()
    // Spigot repository
    maven { url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
    // BungeeCord repository
    maven { url = 'https://oss.sonatype.org/content/groups/public/' }
}

dependencies {
    // Bukkit/Spigot API
    compileOnly 'org.spigotmc:spigot-api:1.16.5-R0.1-SNAPSHOT'
    
    // BungeeCord API for multi-server support
    compileOnly 'net.md-5:bungeecord-api:1.16-R0.5-SNAPSHOT'
    
    // Core-Utils dependency
    compileOnly project(':Core-Utils')
    
    // HikariCP for connection pooling
    implementation 'com.zaxxer:HikariCP:3.4.5'
    
    // MySQL Connector
    implementation 'mysql:mysql-connector-java:8.0.33'
    
    // SLF4J API (required by HikariCP)
    implementation 'org.slf4j:slf4j-api:1.7.25'
    // Simple SLF4J implementation (to avoid warnings)
    implementation 'org.slf4j:slf4j-simple:1.7.25'
    
    // Lombok for reducing boilerplate
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    
    // Testing dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
    testImplementation 'org.mockito:mockito-core:5.5.0'
}

// IMPORTANT: We need to keep the regular JAR for the API
// but we'll ensure it only contains the API classes
jar {
    // Ensure it still generates a jar
    enabled = true
    
    // This will be the API jar
    archiveClassifier.set('api')

    // Only include the API package - VERY IMPORTANT
    // This ensures the API jar only contains the public API
    include 'com/minecraft/sqlbridge/api/**'
    
    // Clean up output
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Configure the shadow jar with appropriate settings
shadowJar {
    // Include all runtime dependencies
    configurations = [project.configurations.runtimeClasspath]
    
    // Don't add a classifier (this makes it the default jar artifact)
    archiveClassifier.set('')
    
    // Relocate dependencies to avoid conflicts
    relocate 'com.zaxxer.hikari', 'com.minecraft.sqlbridge.libs.hikari'
    relocate 'com.mysql', 'com.minecraft.sqlbridge.libs.mysql'
    relocate 'org.slf4j', 'com.minecraft.sqlbridge.libs.slf4j'
    
    // Merge service files properly (needed for JDBC driver registration)
    mergeServiceFiles()
    
    // Clean up output
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Add this task to expose API classes to dependent projects
task explodeApi(type: Copy) {
    from sourceSets.main.output
    into "${buildDir}/exploded-api"
    include 'com/minecraft/sqlbridge/api/**'
}

// Make sure dependent projects can access our classes during compilation
tasks.named('classes').configure {
    finalizedBy(explodeApi)
}

// Make dependent projects compile against our API
project.afterEvaluate {
    configurations.apiElements.outgoing.artifacts.clear()
    configurations.apiElements.outgoing.artifact(jar)
}

// Make compileJava depend on Core-Utils shadow jar
tasks.named('compileJava') {
    dependsOn(':Core-Utils:shadowJar')
}

// Set shadowJar as the default jar for distribution
tasks.named('assemble') {
    dependsOn shadowJar
}

test {
    useJUnitPlatform()
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

// Ensure both JARs (API and full) are in the archives configuration
artifacts {
    // The shadow jar will be the main artifact for deployment
    archives(shadowJar)
    
    // The API jar will be used for compilation by other projects
    archives(jar)
}