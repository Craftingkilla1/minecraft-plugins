package com.minecraft.sqlbridge.connection;

import com.minecraft.core.utils.LogUtil;
import com.minecraft.sqlbridge.stats.QueryStatistics;

import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

/**
 * A connection wrapper that monitors connection usage.
 * Tracks connection lifecycle and query execution.
 */
public class MonitoredConnection implements Connection {

    private final Connection delegate;
    private final ConnectionPool pool;
    private final QueryStatistics statistics;
    private final long creationTime;
    private boolean closed = false;

    /**
     * Create a new monitored connection
     *
     * @param delegate The actual JDBC connection
     * @param pool The connection pool that created this connection
     * @param statistics The query statistics tracker
     */
    public MonitoredConnection(Connection delegate, ConnectionPool pool, QueryStatistics statistics) {
        this.delegate = delegate;
        this.pool = pool;
        this.statistics = statistics;
        this.creationTime = System.currentTimeMillis();
        
        // Record connection acquisition
        if (statistics != null) {
            statistics.recordConnection(true);
        }
    }

    @Override
    public void close() throws SQLException {
        if (!closed) {
            closed = true;
            
            // Record connection release
            if (statistics != null) {
                statistics.recordConnection(false);
            }
            
            // Return connection to the pool instead of actually closing it
            pool.releaseConnection(this);
        }
    }

    /**
     * Actually close the connection rather than returning it to the pool
     */
    public void reallyClose() throws SQLException {
        if (!closed) {
            closed = true;
            
            // Record connection release
            if (statistics != null) {
                statistics.recordConnection(false);
            }
        }
        
        delegate.close();
    }

    /**
     * Check if the connection is valid
     */
    public boolean isValid() {
        try {
            return !closed && !delegate.isClosed() && delegate.isValid(2);
        } catch (SQLException e) {
            return false;
        }
    }

    /**
     * Get the creation time of this connection
     */
    public long getCreationTime() {
        return creationTime;
    }

    /**
     * Create a statement that monitors execution time
     */
    @Override
    public Statement createStatement() throws SQLException {
        return new MonitoredStatement(delegate.createStatement(), statistics);
    }

    /**
     * Create a prepared statement that monitors execution time
     */
    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        return new MonitoredPreparedStatement(delegate.prepareStatement(sql), sql, statistics);
    }

    // Delegated methods with monitoring
    
    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return new MonitoredPreparedStatement(delegate.prepareStatement(sql, resultSetType, resultSetConcurrency), sql, statistics);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return new MonitoredPreparedStatement(delegate.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability), sql, statistics);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        return new MonitoredPreparedStatement(delegate.prepareStatement(sql, autoGeneratedKeys), sql, statistics);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        return new MonitoredPreparedStatement(delegate.prepareStatement(sql, columnIndexes), sql, statistics);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        return new MonitoredPreparedStatement(delegate.prepareStatement(sql, columnNames), sql, statistics);
    }

    @Override
    public CallableStatement prepareCall(String sql) throws SQLException {
        return delegate.prepareCall(sql);
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return delegate.prepareCall(sql, resultSetType, resultSetConcurrency);
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return delegate.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
        return new MonitoredStatement(delegate.createStatement(resultSetType, resultSetConcurrency), statistics);
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return new MonitoredStatement(delegate.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability), statistics);
    }

    // Simple delegated methods

    @Override
    public String nativeSQL(String sql) throws SQLException {
        return delegate.nativeSQL(sql);
    }

    @Override
    public boolean getAutoCommit() throws SQLException {
        return delegate.getAutoCommit();
    }

    @Override
    public void setAutoCommit(boolean autoCommit) throws SQLException {
        delegate.setAutoCommit(autoCommit);
    }

    @Override
    public void commit() throws SQLException {
        delegate.commit();
    }

    @Override
    public void rollback() throws SQLException {
        delegate.rollback();
    }

    @Override
    public boolean isClosed() throws SQLException {
        return closed || delegate.isClosed();
    }

    @Override
    public DatabaseMetaData getMetaData() throws SQLException {
        return delegate.getMetaData();
    }

    @Override
    public boolean isReadOnly() throws SQLException {
        return delegate.isReadOnly();
    }

    @Override
    public void setReadOnly(boolean readOnly) throws SQLException {
        delegate.setReadOnly(readOnly);
    }

    @Override
    public String getCatalog() throws SQLException {
        return delegate.getCatalog();
    }

    @Override
    public void setCatalog(String catalog) throws SQLException {
        delegate.setCatalog(catalog);
    }

    @Override
    public int getTransactionIsolation() throws SQLException {
        return delegate.getTransactionIsolation();
    }

    @Override
    public void setTransactionIsolation(int level) throws SQLException {
        delegate.setTransactionIsolation(level);
    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        return delegate.getWarnings();
    }

    @Override
    public void clearWarnings() throws SQLException {
        delegate.clearWarnings();
    }

    @Override
    public Map<String, Class<?>> getTypeMap() throws SQLException {
        return delegate.getTypeMap();
    }

    @Override
    public void setTypeMap(Map<String, Class<?>> map) throws SQLException {
        delegate.setTypeMap(map);
    }

    @Override
    public int getHoldability() throws SQLException {
        return delegate.getHoldability();
    }

    @Override
    public void setHoldability(int holdability) throws SQLException {
        delegate.setHoldability(holdability);
    }

    @Override
    public Savepoint setSavepoint() throws SQLException {
        return delegate.setSavepoint();
    }

    @Override
    public Savepoint setSavepoint(String name) throws SQLException {
        return delegate.setSavepoint(name);
    }

    @Override
    public void rollback(Savepoint savepoint) throws SQLException {
        delegate.rollback(savepoint);
    }

    @Override
    public void releaseSavepoint(Savepoint savepoint) throws SQLException {
        delegate.releaseSavepoint(savepoint);
    }

    @Override
    public Clob createClob() throws SQLException {
        return delegate.createClob();
    }

    @Override
    public Blob createBlob() throws SQLException {
        return delegate.createBlob();
    }

    @Override
    public NClob createNClob() throws SQLException {
        return delegate.createNClob();
    }

    @Override
    public SQLXML createSQLXML() throws SQLException {
        return delegate.createSQLXML();
    }

    @Override
    public boolean isValid(int timeout) throws SQLException {
        return !closed && delegate.isValid(timeout);
    }

    @Override
    public void setClientInfo(String name, String value) throws SQLClientInfoException {
        delegate.setClientInfo(name, value);
    }

    @Override
    public String getClientInfo(String name) throws SQLException {
        return delegate.getClientInfo(name);
    }

    @Override
    public Properties getClientInfo() throws SQLException {
        return delegate.getClientInfo();
    }

    @Override
    public void setClientInfo(Properties properties) throws SQLClientInfoException {
        delegate.setClientInfo(properties);
    }

    @Override
    public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
        return delegate.createArrayOf(typeName, elements);
    }

    @Override
    public Struct createStruct(String typeName, Object[] attributes) throws SQLException {
        return delegate.createStruct(typeName, attributes);
    }

    @Override
    public String getSchema() throws SQLException {
        return delegate.getSchema();
    }

    @Override
    public void setSchema(String schema) throws SQLException {
        delegate.setSchema(schema);
    }

    @Override
    public void abort(Executor executor) throws SQLException {
        delegate.abort(executor);
    }

    @Override
    public void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException {
        delegate.setNetworkTimeout(executor, milliseconds);
    }

    @Override
    public int getNetworkTimeout() throws SQLException {
        return delegate.getNetworkTimeout();
    }

    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
        return delegate.unwrap(iface);
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return delegate.isWrapperFor(iface);
    }
}